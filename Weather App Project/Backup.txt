function selectPage(){
    let pageID = document.body.id;

    switch(page){
        case "index":
            runIndex();
            break;
    }
}

// Selecting elements from HTML file by making them accessible on JS

const notificationElement = document.querySelector(".notification");
const iconElement = document.querySelector(".weather-icon");
const tempElement = document.querySelector(".temperature-value p"); // p selects the paragraph
const descElement = document.querySelector(".temperature-description p");
const locationElement = document.querySelector(".location p");
const tempFeelElement = document.querySelector(".temperature-feelsLike p");
const searchBoxElement = document.querySelector(".search-box");

// APP CONSTANTS AND VARIABLES

const KELVIN_CONVERSION = 273;
const ENTER_KEYCODE = 13;

// API key
const key = "c7d17aec8f46f278fbd1a97e901d3fc6";

// Storing weather data inside an object
const weather = {};
weather.temperature = {
    unit : "celsius"
};

// Accessing user location

// First check if the geolocation device is available
// Check if geolocation property is in navigator (if service is available)
if ("geolocation" in navigator){
    // Obtain user position
    navigator.geolocation.getCurrentPosition(setPosition, showError);   // both param are predefined methods
}
else{
    // Error message display
    notificationElement.style.display = "block";
    notificationElement.innerHTML = "<p>Browser does not support geolocation.</p>"
}

// Finding user's position
// overriding predefined setPosition
function setPosition(position){
    let latitude = position.coords.latitude;
    let longitude = position.coords.longitude;
    
    getWeatherByGeo(latitude, longitude);
}

// Display error message if there is no geolocation service
// overriding predefined error
function showError(error){
    notificationElement.style.display = "block";
    notificationElement.innerHTML = `<p>${error.message}</p>`;
}

// Get weather info from API provider
function getWeatherByGeo(latitude, longitude){
    // storing the address of the specific weather info from API
    let api = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;
    getWeather(api);
}

function getWeatherByName(cityName){
    let api = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${key}`;
    getWeather(api);
}

// Displaying weather by changing HTML content through JS
function displayWeather(){
    iconElement.innerHTML = `<img src="icons/${weather.iconId}.png">`;
    tempElement.innerHTML = `${weather.temperature.value}°<span>C</span>`;
    tempFeelElement.innerHTML = `<span>Feels like </span>${weather.temperature.feelsLike}°<span>C</span>`;
    descElement.innerHTML = weather.description;
    locationElement.innerHTML = `${weather.city}, ${weather.country}`;
}

// C to F conversion
function celsiusToFahrenheit(temperature){
    return (temperature * 9/5) + 32;
}

// User C to F and vice versa conversion
// First param indicates mouse click, second is the function to be called once clicked
tempElement.addEventListener("click", function(){
    // Return null if no temperature found
    if (weather.temperature.value === undefined || weather.temperature.feelsLike === undefined)
        return null;
    else{
        // Converting from C to F
        if (weather.temperature.unit === "celsius" || weather.temperature.unit === "celsius"){
            // Convert C temp into F and store it in let, then round
            let convertedTemperatureValue = Math.floor(celsiusToFahrenheit(weather.temperature.value));
            let convertedTemperatureFeel = Math.floor(celsiusToFahrenheit(weather.temperature.feelsLike));

            // Change unit property in weather as F and change display of temperature in HTML
            // Keep temperature number since user will not see and conversion back to C
            weather.temperature.unit = "fahrenheit";
            tempElement.innerHTML = `${convertedTemperatureValue}°<span>F</span>`;
            tempFeelElement.innerHTML = `<span>Feels like </span>${convertedTemperatureFeel}°<span>F</span>`;
        }
        // Converting from F to C
        else{
            // Change unit property to C
            // Change user display
            weather.temperature.unit = "celsius";
            tempElement.innerHTML = `${weather.temperature.value}°<span>C</span>`;
            tempFeelElement.innerHTML = `<span>Feels like </span>${weather.temperature.feelsLike}°<span>C</span>`;
        }
    }
});

searchBoxElement.addEventListener("keypress", setQuery);

function setQuery(event){
    if (event.keyCode == ENTER_KEYCODE){
        //getResults(searchBox.value);
        console.log(searchBoxElement.value);
        getWeatherByName(searchBoxElement.value);
    }
}

function getWeather(api){
        // Access weather info from API
        fetch(api)
        // .then is for successive access of data, response is the info accessed
        // unamed function is suitable for functions inside a function, or store it in a variable
        .then(function(response){
            let data = response.json();
            return data;
        })
        .then(function(data){
            try{
                // Adding new properties to weather as info is received from API
                weather.temperature.value = Math.floor(data.main.temp - KELVIN_CONVERSION);
                weather.temperature.feelsLike = Math.floor(data.main.feels_like - KELVIN_CONVERSION);
                weather.description = data.weather[0].description;
                weather.iconId = data.weather[0].icon;
                weather.city = data.name;
                weather.country = data.sys.country;
            } catch(error){
                alert(`Location does not exist!\nPlease enter a municipality in the format "name" or "name, country abbreviation".\nEx. San Francisco, US`);
            }
        })
        .then(function(){
            // Display weather accordingly
            displayWeather();
        });
}
